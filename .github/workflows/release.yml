name: Release
env:
  RUN_OFFSET: 4
'on':
  release:
    types: [published]
  workflow_dispatch:
jobs:

  json_checker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: json-syntax-check
        uses: limitusus/json-syntax-check@v1
        with:
          pattern: "\\.json$"

  unit_tests:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Java 17
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # Caching gradle
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/*.toml*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Unit tests
      - name: Unit tests
        run: ./gradlew clean testSandDebugUnitTest testDebugUnitTest

      # Publish test report
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: '**/build/test-results/**/TEST-*.xml'

  deploy:
    runs-on: ubuntu-latest
    needs: [unit_tests,json_checker]
    steps:
      # Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # Setup Java 17
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # Caching gradle
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/*.toml*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Environment
      - name: Environment variables
        run: |
          echo ${{ secrets.ENCODED_GOOGLE_SERVICES_LIVE }} | base64 --decode >> app/src/live/google-services.json
          echo ${{ secrets.ENCODED_KEYSTORE }} | base64 --decode >> hour-glass.keystore
          echo ${{ secrets.ENCODED_DEPLOYMENT_KEY }} | base64 --decode >> deployment_private_key.json

      # Version tag
      - name: Version Name
        id: get_version_name
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      # Version code
      - name: Version Code
        id: get_version_code
        run: echo "VERSION=$((${{ github.run_number }} + $RUN_OFFSET))" >> $GITHUB_OUTPUT

      # Release
      - name: Release to internal test track
        env:
          KEYSTORE: ${{ github.workspace }}/hour-glass.keystore
          PRIVATE_KEY: ${{ github.workspace }}/deployment_private_key.json
          KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          VERSION_CODE: ${{ steps.get_version_code.outputs.VERSION }}
          VERSION_NAME: ${{ steps.get_version_name.outputs.VERSION }}
        run: ./gradlew assembleLiveRelease publishLiveReleaseBundle uploadCrashlyticsMappingFileLiveRelease

      # Add artifact to tag
      - name: Upload file to github tag
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: app/build/outputs/apk/live/release/app-live-release.apk

  update_versions:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ github.ref != 'refs/heads/master' }}
    steps:

      # Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Version name
      - name: Version Name
        id: get_version_name
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
      - name: Output version name
        run: echo ${{ steps.get_version_name.outputs.VERSION }} > version-name.txt

      # Version code
      - name: Version Code
        id: get_version_code
        run: echo "VERSION=$((${{ github.run_number }} + $RUN_OFFSET))" >> $GITHUB_OUTPUT

      # Create pull request
      - name: Create Pull Request
        id: createpr
        uses: peter-evans/create-pull-request@v7
        with:
          base: main
          token: ${{ secrets.PAT }}
          commit-message: Updates version to ${{ steps.get_version_name.outputs.VERSION }} (${{ steps.get_version_code.outputs.VERSION }})
          branch: versions/update-${{ steps.time.outputs.date }}
          delete-branch: true
          title: 'Update app version'
          body: |
            Updates version to ${{ steps.get_version_name.outputs.VERSION }} (${{ steps.get_version_code.outputs.VERSION }})
          labels: |
            Auto Merge
          draft: false

      # Enable automerge
      - name: Pull Request - Enable Automerge
        if: steps.createpr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.PAT }}
          pull-request-number: ${{ steps.createpr.outputs.pull-request-number }}
          merge-method: merge

  discord_notify:
    runs-on: ubuntu-latest
    needs: [update_versions]
    if: always()
    steps:

      # Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Version tag
      - name: Version Name
        id: get_version_name
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      # Version code
      - name: Version Code
        id: get_version_code
        run: echo "VERSION=$((${{ github.run_number }} + $RUN_OFFSET))" >> $GITHUB_OUTPUT

      - name: Notify discord of failure
        uses: sarisia/actions-status-discord@v1.13.0
        if: failure() || needs.deploy.result == 'failure' || needs.update_versions.result == 'failure' || needs.unit_test.result == 'failure'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          nodetail: true
          title: "Android: Release ${{ steps.get_version_name.outputs.VERSION }} (${{ steps.get_version_code.outputs.VERSION }}) deployment failed"
          description: |
            Github Action [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: 0xfa4665

      - name: Notify discord of success
        uses: sarisia/actions-status-discord@v1.13.0
        if: success() && needs.deploy.result != 'failure' && needs.update_versions.result != 'failure' && needs.unit_test.result != 'failure'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          nodetail: true
          title: "Android: Release ${{ steps.get_version_name.outputs.VERSION }} (${{ steps.get_version_code.outputs.VERSION }}) deployed"
          description: |
            Github Action [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Google Play](https://play.google.com/console/u/0/developers/7104925501019224102/app/4972386210601361096/app-dashboard)
          color: 0x3dc91a