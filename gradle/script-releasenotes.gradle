import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.xml.MarkupBuilder

/**
 * Generate the release notes format used within the app
 *
 * Reads release notes directory
 * - values/release-notes.xml file with strings folders
 */
task generateReleaseNotes {
    println("Release notes - Generating...")

    // Folder with release notes json
    def releaseNotes = "releases.json"

    def stringsXMLLocation = "app/src/main/res/values/release-notes.xml"
    def kotlinFileLocation = "app/src/main/java/tmg/hourglass/ReleaseNotes.kt"
    def kotlinFileContents = """package tmg.hourglass
import androidx.annotation.StringRes
import tmg.hourglass.R
/** 
 * This file is auto generated! Please do not modify! 
 */
enum class ReleaseNotes(
        val version: Int,
        val isMajor: Boolean = false,
        val versionName: String,
        @StringRes
        val title: Int,
        @StringRes
        val release: Int
) {
[[VERSION_ENUM_VALUES]]
}
"""

    def enumValues = ""

    // Process each one, generating resources
    def xmlWriter = new StringWriter()
    def xmlStrings = new MarkupBuilder(xmlWriter)
    def total = 0
    xmlStrings.resources() {
        def json = new File(releaseNotes)
        def parsedJson = new JsonSlurper().parseText(json.text)

        for (noteObj in parsedJson) {
            def notesString = ""
            def count = 0
            for (note in noteObj.notes) {
                if (count == 0) {
                    notesString += "- ${note}"
                } else {
                    notesString += "\\n- ${note}"
                }
                count++
            }

            def releaseNotesString = "${notesString}"
            string(name: "release_${noteObj.versionCode}", releaseNotesString)
            string(name: "release_${noteObj.versionCode}_title", noteObj.title)

            enumValues += "    VERSION_${noteObj.versionCode}(version = ${noteObj.versionCode}, isMajor = ${noteObj.isMajor}, versionName = \"${noteObj.versionName}\", title = R.string.release_${noteObj.versionCode}_title, release = R.string.release_${noteObj.versionCode}),\n"
            total++
        }
    }
    def xmlStringsFile = new File(stringsXMLLocation)
    xmlStringsFile.getParentFile().mkdirs()
    xmlStringsFile.write(xmlWriter.toString())

    def kotlinFile = new File(kotlinFileLocation)
    kotlinFile.getParentFile().mkdirs()
    kotlinFile.write(kotlinFileContents.replace("[[VERSION_ENUM_VALUES]]", enumValues))

    println("Release notes - Generated ${total} notes")
}