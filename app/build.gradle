import com.github.triplet.gradle.androidpublisher.ResolutionStrategy
import groovy.json.JsonSlurper

apply plugin: 'com.android.application'
apply from: rootDir.absolutePath + "/gradle/config-android.gradle"
apply from: rootDir.absolutePath + "/gradle/config-util.gradle"
apply from: rootDir.absolutePath + "/gradle/config-junit5.gradle"
apply from: rootDir.absolutePath + "/gradle/config-koin.gradle"

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.github.triplet.play'

apply from: rootDir.absolutePath + "/gradle/script-releasenotes.gradle"

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "tmg.hourglass"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode // generatedVersionCode
        versionName project.ext.versionName // generatedVersionName

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "hour-glass.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_ALIAS")
            keyPassword System.getenv("KEYSTORE_PASSWORD")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'version'
    productFlavors {
        sand {
            dimension 'version'
            applicationIdSuffix '.sand'
            versionNameSuffix '-sand'

            buildConfigField "int", "ENVIRONMENT", '1'
        }

        live {
            dimension 'version'

            buildConfigField "int", "ENVIRONMENT", '0'
        }
    }

    packagingOptions {
        exclude "META-INF/LICENSE*"
        exclude "META-INF/library_release.kotlin_module"
    }
}

play {
    track = 'internal'
    serviceAccountCredentials = file(System.getenv("PRIVATE_KEY") ?: "hour-glass.json")
    defaultToAppBundles = true
    resolutionStrategy = ResolutionStrategy.IGNORE
}

// Adds generate tasks to assemble
tasks.whenTaskAdded { task ->
    if (task.name.contains("assemble")) {
        task.dependsOn generateReleaseNotes
    }
}

dependencies {

    // Modules
    implementation project(path: ":realm")
    implementation project(path: ":domain")

    // Firebase
    implementation platform(deps.firebase.bom)
    implementation deps.firebase.analytics
    implementation deps.firebase.crashlytics

    // TMG
    implementation deps.tmg.aboutthisapp
    implementation deps.tmg.labelledprogressbar

    // BugShaker
    implementation deps.bugshaker

    // ColorSheet
    implementation deps.colorsheet
}
