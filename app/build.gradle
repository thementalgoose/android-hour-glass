import com.github.triplet.gradle.androidpublisher.ResolutionStrategy
import groovy.json.JsonSlurper

apply plugin: 'com.android.application'

apply from: rootDir.absolutePath + "/gradle/config-android.gradle"
apply from: rootDir.absolutePath + "/gradle/config-util.gradle"
apply from: rootDir.absolutePath + "/gradle/config-junit5.gradle"
apply from: rootDir.absolutePath + "/gradle/config-hilt.gradle"
apply from: rootDir.absolutePath + "/gradle/config-compose.gradle"

apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.github.triplet.play'

android {
    compileSdk project.ext.compileSdkVersion

    defaultConfig {
        applicationId "tmg.hourglass"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode // generatedVersionCode
        versionName project.ext.versionName // generatedVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "hour-glass.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_ALIAS")
            keyPassword System.getenv("KEYSTORE_PASSWORD")
        }
    }

    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    packagingOptions {
        jniLibs {
            excludes += ['META-INF/*']
        }
        resources {
            excludes += [
                    'win32-x86-64/attach_hotspot_windows.dll',
                    'win32-x86/attach_hotspot_windows.dll',
                    'META-INF/LGPL2.1',
                    'META-INF/AL2.0',
                    'META-INF/licenses/ASM',
                    'META-INF/*',
                    "lib/arm64-v8a/librealm-jni.so"
            ]
        }
    }
    flavorDimensions += 'version'
    productFlavors {
        sand {
            isDefault.set(true)
            dimension 'version'
            applicationIdSuffix '.sandbox'
            versionNameSuffix '-sandbox'

            buildConfigField "int", "ENVIRONMENT", '1'
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }

        live {
            dimension 'version'

            buildConfigField "int", "ENVIRONMENT", '0'
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
        }
    }

    namespace 'tmg.hourglass'
}

play {
    track = 'internal'
    serviceAccountCredentials = file(System.getenv("PRIVATE_KEY") ?: "hour-glass.json")
    defaultToAppBundles = true
    resolutionStrategy = ResolutionStrategy.IGNORE
}

dependencies {
    implementation project(path: ':core:metrics:googleanalytics')
    implementation project(path: ':core:metrics:crashlytics')

    // Modules
    implementation project(path: ":data:realm")
    implementation project(path: ":domain")
    implementation project(path: ":presentation:ui")
    implementation project(path: ":presentation:strings")
    implementation project(path: ":presentation:navigation")
    implementation project(path: ":widgets")

    implementation libs.androidx.splashscreen

    // Firebase
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics
    implementation libs.firebase.crashlytics
    implementation libs.firebase.perf

    // TMG
    implementation libs.tmg.aboutthisapp
    implementation libs.tmg.utils
    implementation libs.tmg.labelledprogressbar

    // BugShaker
    implementation libs.falcon
    implementation libs.shakey

    // Accompanist
    implementation libs.accompanist.systemuicontroller

    testImplementation(testFixtures(project(path: ':domain')))
}

apply plugin: 'com.google.gms.google-services'
